generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  password       String?
  name           String?
  picture        String?
  role           String       @default("user")
  enabled        Boolean      @default(true)
  address        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  carts          Cart[]
  orders         Order[]
  favorites      Favorite[] // เพิ่ม relation กับ Favorite
  productRatings Rating[] // เพิ่ม relation กับ Rating
  userCoupons    UserCoupon[]
  picturePub     String?
  updatedBy      String? //เก็บ email admin ที่เปลี่ยน status user คนอื่น
  // updatedBy      User?        @relation(fields: [updatedById], references: [id])
  // updatedById    Int?
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  price       Float
  sold        Int              @default(0)
  quantity    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categoryId  Int?
  images      Image[]
  category    Category?        @relation(fields: [categoryId], references: [id])
  cartItems   ProductOnCart[]
  orderItems  ProductOnOrder[]
  promotion   Float? // เก็บค่า % ส่วนลดทั่วไป
  discounts   Discount[] // เพิ่ม relation กับ Discount สำหรับ high-season
  favorites   Favorite[] // เพิ่ม relation กับ Favorite
  ratings     Rating[] // เพิ่ม relation กับ Rating
  avgRating   Float? // เพิ่ม col เก็บค่าเฉลี่ย rating
  brandId     Int? // เพิ่ม col สำหรับเก็บ foreign key ของแบรนด์
  brand       Brand?           @relation(fields: [brandId], references: [id]) // เพิ่ม relation กับ Brand
  createdBy   String?
  updatedBy   String?
  // createdBy   User?    @relation(fields: [createdById], references: [id]) // use to access whole table User | includes: {createdBy:true} 
  // createdById Int?     //foreign key | use with where clause | where: {createdById: 123}
  // updatedBy   User?    @relation(fields: [updatedById], references: [id])
  // updatedById Int?
}

model Order {
  id           Int              @id @default(autoincrement())
  cartTotal    Float
  orderStatus  String           @default("Not Process")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  orderedById  Int
  orderedBy    User             @relation(fields: [orderedById], references: [id])
  products     ProductOnOrder[]
  ratings      Rating[] // เพิ่ม relation กับ Rating เพื่อตรวจสอบว่าสั่งซื้อแล้วหรือยัง
  paymentId    String           @default("")
  amount       Float            @default(0)
  status       String           @default("")
  currency     String           @default("thb")
  refundAmount Float?           @default(0)
  updatedBy    String? //เก็บ email admin ที่เปลี่ยน status
  // updatedBy    User?    @relation(fields: [updatedById], references: [id])
  // updatedById  Int?
}

model ProductOnOrder {
  id         Int      @id @default(autoincrement())
  productId  Int
  orderId    Int
  count      Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount   Float? // เพิ่มฟิลด์เก็บส่วนลดที่ได้ ณ เวลาที่สั่งซื้อ
  isRefunded Boolean? @default(false)
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  createdBy String?
  // createdBy   User?    @relation(fields: [createdById], references: [id])
  // createdById Int?     //foreign key
}

model Cart {
  id          Int             @id @default(autoincrement())
  cartTotal   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderedById Int
  orderedBy   User            @relation(fields: [orderedById], references: [id])
  products    ProductOnCart[]
  // consider adding these fields
  // lastSynced  DateTime        @updatedAt // Track last sync time
  // status      String          @default("active") // Track cart status
}

model ProductOnCart {
  id          Int     @id @default(autoincrement())
  /// คือเปลี่ยนตาม id (is independent) ใน table 'Cart'
  cartId      Int
  productId   Int
  count       Int
  price       Float
  cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  //adding these to support discounts
  buyPriceNum Float // Store discounted price at time of adding
  discount    Float? // Store applied discount
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productId  Int?
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  brand      Brand?   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId    Int? // เพิ่ม field สำหรับเก็บ foreign key ของแบรนด์
}

//  Favorite feature
model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /**
   * // User 1 cannot have Product 1 twice in their cart/favorites
   * {userId: 1, productId: 1} ✅ // Allowed
   * {userId: 1, productId: 1} ❌ // Rejected - duplicate
   * {userId: 1, productId: 2} ✅ // Allowed - different product
   * {userId: 2, productId: 1} ✅ // Allowed - different user
   */

  @@unique([userId, productId]) // ป้องกันการเพิ่ม favorite ซ้ำ
}

//  Rating feature
model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int // เก็บคะแนน 1-5
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?

  @@unique([userId, productId, orderId, comment]) // ป้องกันการให้ rating ซ้ำในแต่ละ order record
}

// สำหรับ Seasonal Discount
model Discount {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  amount      Float // เก็บค่า%ส่วนลด
  startDate   DateTime // วันที่เริ่มต้นส่วนลด
  endDate     DateTime // วันที่สิ้นสุดส่วนลด
  description String? // คำอธิบาย เช่น "High Season Sale"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String // เก็บ email ของ admin ที่สร้าง discount
  // createdBy   User?    @relation(fields: [createdById], references: [id])
  // createdById Int?     //foreign key

  /**
   * // Querying promotions between dates becomes faster
   * const promotions = await prisma.promotion.findMany({
   * where: {
   * startDate: {
   * gte: new Date('2024-01-01'),
   * lte: new Date('2024-12-31')
   * }
   * }
   * });
   */
  @@index([startDate, endDate]) // เพิ่ม index เพื่อการค้นหาที่เร็วขึ้น, but not create index record
}

// For managing coupons
model Coupon {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  type        String       @default("FREE_SHIPPING") // For future coupon types
  amount      Int // Number of available coupons
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String // Admin email
  userCoupons UserCoupon[]
  // createdBy   User?    @relation(fields: [createdById], references: [id])
  // createdById Int?     //foreign key
}

// For tracking which users have claimed which coupons
model UserCoupon {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  coupon    Coupon    @relation(fields: [couponId], references: [id], onDelete: Cascade)
  couponId  Int
  usedAt    DateTime? // null means claimed but not used yet
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, couponId]) // Prevent user from claiming same coupon twice
}

model Brand {
  id          Int       @id @default(autoincrement())
  title       String    @unique // ชื่อ brandต้องไม่ซ้ำกัน
  description String?
  images      Image[] // ใช้table Image เดิมสำหรับเก็บรูป brand
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
